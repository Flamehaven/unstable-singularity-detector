🛠️ Path #9 — Patch Set 9 (Report & Analysis)
1. Matplotlib + WeasyPrint 기반 PDF 리포트

📍 파일: experiment_tracker.py

*** Begin Patch
*** Update File: experiment_tracker.py
@@ class ExperimentTracker:
+    def generate_pdf_report(self, run_id: str, output_file: str = "report.pdf"):
+        """Generate PDF report with metrics, plots, and config"""
+        import matplotlib.pyplot as plt
+        from weasyprint import HTML
+        run = self.client.get_run(run_id)
+        params = run.data.params
+        metrics = run.data.metrics
+
+        # Simple HTML template
+        html = f"""
+        <h1>Experiment Report</h1>
+        <h2>Run ID: {run_id}</h2>
+        <h3>Parameters</h3>
+        <pre>{params}</pre>
+        <h3>Metrics</h3>
+        <pre>{metrics}</pre>
+        """
+        HTML(string=html).write_pdf(output_file)
+        logger.info(f"[Report] PDF saved to {output_file}")
*** End Patch

2. HTML Report with Interactive Plots (Plotly)

📍 파일: visualization_enhanced.py

*** Begin Patch
*** Update File: visualization_enhanced.py
@@
 import meshio
 import dash
 from dash import dcc, html
 import plotly.graph_objs as go
+
+def export_html_report(residual_history, lambdas, filename="report.html"):
+    """Generate standalone HTML with interactive plots"""
+    import plotly.express as px
+    import plotly.offline as pyo
+    fig1 = go.Figure([go.Scatter(y=residual_history, mode="lines")])
+    fig1.update_layout(title="Residual Convergence", yaxis_type="log")
+    fig2 = go.Figure([go.Scatter(y=lambdas, mode="markers+lines")])
+    fig2.update_layout(title="Lambda Instability Pattern")
+
+    with open(filename, "w") as f:
+        f.write("<h1>Experiment Report</h1>")
+        f.write(pyo.plot(fig1, include_plotlyjs="cdn", output_type="div"))
+        f.write(pyo.plot(fig2, include_plotlyjs=False, output_type="div"))
+    print(f"[HTML Report] Saved to {filename}")
*** End Patch

3. Jupyter Notebook Exporter

📍 파일: experiment_tracker.py

*** Begin Patch
*** Update File: experiment_tracker.py
@@ class ExperimentTracker:
+    def export_notebook(self, run_id: str, filename="analysis.ipynb"):
+        """Generate Jupyter notebook with experiment analysis cells"""
+        import nbformat as nbf
+        run = self.client.get_run(run_id)
+        params = run.data.params
+        metrics = run.data.metrics
+
+        nb = nbf.v4.new_notebook()
+        nb.cells.append(nbf.v4.new_markdown_cell("# Experiment Analysis Notebook"))
+        nb.cells.append(nbf.v4.new_code_cell(f"params = {params}\nmetrics = {metrics}\nprint(params, metrics)"))
+        nb.cells.append(nbf.v4.new_code_cell("import matplotlib.pyplot as plt\n# Add your custom plots here"))
+
+        with open(filename, "w") as f:
+            nbf.write(nb, f)
+        logger.info(f"[Notebook Export] Jupyter notebook saved to {filename}")
*** End Patch

4. Auto-Summary Generation (Markdown)

📍 파일: experiment_tracker.py

*** Begin Patch
*** Update File: experiment_tracker.py
@@ class ExperimentTracker:
+    def summarize_run(self, run_id: str, output_file="summary.md"):
+        """Generate Markdown summary of experiment"""
+        run = self.client.get_run(run_id)
+        params = run.data.params
+        metrics = run.data.metrics
+        with open(output_file, "w") as f:
+            f.write(f"# Experiment Summary\n\n")
+            f.write(f"**Run ID**: {run_id}\n\n")
+            f.write("## Parameters\n")
+            for k, v in params.items():
+                f.write(f"- {k}: {v}\n")
+            f.write("\n## Metrics\n")
+            for k, v in metrics.items():
+                f.write(f"- {k}: {v}\n")
+        logger.info(f"[Summary] Markdown summary saved to {output_file}")
*** End Patch

✅ Path #9 패치 세트 요약

PDF Report (WeasyPrint) → 파라미터, 메트릭 정리된 PDF 자동 생성

HTML Report (Plotly) → Interactive residual/λ 그래프 포함

Jupyter Notebook Export → 분석 가능한 .ipynb 자동 생성

Markdown Summary → 빠른 텍스트 보고용 요약 파일