🛠️ Path #5 — Patch Set 5 (Visualization / Dashboard)
1. Plotly-Dash 실시간 Residual 대시보드

📍 파일: visualization_enhanced.py

*** Begin Patch
*** Update File: visualization_enhanced.py
@@
 import matplotlib.pyplot as plt
 import meshio
+import dash
+from dash import dcc, html
+import plotly.graph_objs as go
+
+def launch_residual_dashboard(residual_history):
+    """Launch interactive Dash app for residual monitoring"""
+    app = dash.Dash(__name__)
+    app.layout = html.Div([
+        html.H2("Residual Convergence Dashboard"),
+        dcc.Graph(
+            id="residual-graph",
+            figure={
+                "data": [go.Scatter(y=residual_history, mode="lines", name="Residual")],
+                "layout": go.Layout(
+                    title="Residual Convergence",
+                    xaxis={"title": "Epoch"},
+                    yaxis={"title": "Residual (log scale)", "type": "log"}
+                )
+            }
+        )
+    ])
+    app.run_server(debug=False, use_reloader=False)
*** End Patch

2. Interactive λ 분석 (error bars + regression)

📍 파일: visualization_enhanced.py

*** Begin Patch
*** Update File: visualization_enhanced.py
@@
 def plot_lambda_instability_pattern(lambdas, confidence, save_path=None):
-    plt.errorbar(range(len(lambdas)), lambdas, yerr=confidence, fmt='o')
-    plt.xlabel("Order n")
-    plt.ylabel("λₙ")
-    plt.title("Instability Pattern")
-    if save_path:
-        plt.savefig(save_path)
-    plt.close()
+    import numpy as np
+    from sklearn.linear_model import LinearRegression
+
+    x = np.arange(len(lambdas)).reshape(-1, 1)
+    y = np.array(lambdas)
+    model = LinearRegression().fit(x, y)
+    y_pred = model.predict(x)
+    r2 = model.score(x, y)
+
+    plt.errorbar(range(len(lambdas)), lambdas, yerr=confidence, fmt='o', label="λₙ (with CI)")
+    plt.plot(range(len(lambdas)), y_pred, '--', label=f"Linear Fit (R²={r2:.3f})")
+    plt.xlabel("Order n")
+    plt.ylabel("λₙ")
+    plt.title("Instability Pattern with Regression")
+    plt.legend()
+    if save_path:
+        plt.savefig(save_path, dpi=200)
+    plt.close()
*** End Patch

3. 웹 UI: 결과 비교 뷰어 (Stage 1 vs Stage 2)

📍 파일: visualization_enhanced.py

*** Begin Patch
*** Update File: visualization_enhanced.py
+
+def launch_comparison_dashboard(stage1_data, stage2_data, coords):
+    """Interactive web UI to compare Stage 1 and Stage 2 predictions"""
+    import dash
+    from dash import dcc, html
+    import plotly.express as px
+    import numpy as np
+
+    stage1_vals = stage1_data.detach().cpu().numpy().flatten()
+    stage2_vals = stage2_data.detach().cpu().numpy().flatten()
+    coords_np = coords.detach().cpu().numpy()
+
+    fig1 = px.scatter(x=coords_np[:,0], y=stage1_vals, title="Stage 1 Predictions")
+    fig2 = px.scatter(x=coords_np[:,0], y=stage2_vals, title="Stage 2 Predictions")
+
+    app = dash.Dash(__name__)
+    app.layout = html.Div([
+        html.H2("Stage Comparison Dashboard"),
+        dcc.Graph(figure=fig1),
+        dcc.Graph(figure=fig2)
+    ])
+    app.run_server(debug=False, use_reloader=False)
*** End Patch

4. λ 시계열 추적 그래프 (실험 진행 중)

📍 파일: visualization_enhanced.py

*** Begin Patch
*** Update File: visualization_enhanced.py
+
+def plot_lambda_timeseries(lambda_history, save_path=None):
+    """Plot λ estimates as a function of training step"""
+    plt.plot(lambda_history, marker="o")
+    plt.xlabel("Training Step")
+    plt.ylabel("λ estimate")
+    plt.title("λ Evolution Over Training")
+    if save_path:
+        plt.savefig(save_path, dpi=200)
+    plt.close()
*** End Patch

✅ Path #5 패치 세트 요약

Plotly-Dash residual 대시보드 → 학습 중 실시간 모니터링

Interactive λ 분석 → error bar + regression + R² 평가

Stage 1 vs Stage 2 비교 웹 UI → Interactive 시각화

λ 시계열 추적 → 학습 중 λ 변화 기록