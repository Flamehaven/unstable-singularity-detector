🛠️ Path #7 — Patch Set 7 (Data & Reproducibility)
1. Dataset Versioning (DVC/Git) 훅 추가

📍 파일: experiment_tracker.py

*** Begin Patch
*** Update File: experiment_tracker.py
@@ class ExperimentTracker:
+    def track_dataset(self, dataset_path: str):
+        """Track dataset version using hash (compatible with DVC/Git)"""
+        import hashlib
+        BUF_SIZE = 65536
+        sha1 = hashlib.sha1()
+        with open(dataset_path, "rb") as f:
+            while True:
+                data = f.read(BUF_SIZE)
+                if not data:
+                    break
+                sha1.update(data)
+        dataset_hash = sha1.hexdigest()
+        self.client.log_param(self.active_run.info.run_id, "dataset_path", dataset_path)
+        self.client.log_param(self.active_run.info.run_id, "dataset_hash", dataset_hash)
+        logger.info(f"[Dataset] Tracked {dataset_path} with hash={dataset_hash[:8]}")
*** End Patch

2. Config Hash Tracking (실험 재현성 보장)

📍 파일: experiment_tracker.py

*** Begin Patch
*** Update File: experiment_tracker.py
@@ class ExperimentTracker:
+    def log_config_hash(self, cfg: dict):
+        """Log SHA1 hash of the config dict for reproducibility"""
+        import hashlib, json
+        cfg_str = json.dumps(cfg, sort_keys=True)
+        cfg_hash = hashlib.sha1(cfg_str.encode()).hexdigest()
+        self.client.log_param(self.active_run.info.run_id, "config_hash", cfg_hash)
+        logger.info(f"[Config] Logged config hash={cfg_hash[:8]}")
*** End Patch

3. Run Provenance 기록 (git commit, hostname, seed)

📍 파일: experiment_tracker.py

*** Begin Patch
*** Update File: experiment_tracker.py
@@ class ExperimentTracker:
+    def log_provenance(self):
+        """Log code + environment provenance"""
+        import subprocess, socket, random, torch
+        try:
+            commit = subprocess.check_output(["git", "rev-parse", "HEAD"]).decode().strip()
+        except Exception:
+            commit = "unknown"
+        hostname = socket.gethostname()
+        seed = random.randint(0, 10**6)
+        torch.manual_seed(seed)
+
+        self.client.log_param(self.active_run.info.run_id, "git_commit", commit)
+        self.client.log_param(self.active_run.info.run_id, "hostname", hostname)
+        self.client.log_param(self.active_run.info.run_id, "random_seed", seed)
+        logger.info(f"[Provenance] commit={commit[:8]}, host={hostname}, seed={seed}")
*** End Patch

4. Dataset/Config/Provenance Replay Helper

📍 파일: experiment_tracker.py

*** Begin Patch
*** Update File: experiment_tracker.py
@@ class ExperimentTracker:
+    def replay_metadata(self, run_id: str):
+        """Rebuild experiment setup from logged metadata"""
+        run = self.client.get_run(run_id)
+        params = run.data.params
+        logger.info("[Replay Metadata] Run parameters:")
+        for k, v in params.items():
+            logger.info(f"  {k}: {v}")
+        return params
*** End Patch

✅ Path #7 패치 세트 요약

Dataset Versioning → dataset 파일 hash 추적 (DVC 호환)

Config Hash Tracking → config dict을 SHA1 hash로 저장

Run Provenance 기록 → git commit, hostname, random seed 자동 로깅

Replay Helper → metadata 기반 재현 실행 setup 복원